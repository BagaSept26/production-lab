import React, { useState } from "react";
import { FiPlusCircle, FiTrash2, FiCheckSquare, FiSquare, FiLoader, FiAlertCircle, FiList } from "react-icons/fi";
import { useModelKu } from "../../../konteks/KonteksModelAi.jsx";
import {  AnimatePresence } from 'framer-motion';

const AntarmukaTodoListAI=()=>{
    const [tujuanUtama, setTujuanUtama] = useState('');
    const [todoList, setTodolist] = useState([]);
    const [lagiGenerate, setLagiGenerate] = useState(false);
    const [pesanError, setPesanError] = useState('');
    const {modelYangDipake} = useModelKu();

    const handleGenerateList = async()=>{
        if(!tujuanUtama.trim()){
            setPesanError('Please describe your main goal or project.');
            return;
        }
        setLagiGenerate(true);
        setPesanError('');
        setTodolist([]);

        console.log(`Generating todo list for: "${tujuanUtama}" using ${modelYangDipake} model.`);
        await new Promise(resolve=> setTimeout(resolve,1500)); //API

        //hasil dummy
        const listDummy = [
            {id: Date.now()+1, text: `Research ${tujuanUtama.split(" ")[0]}(Generated by ${modelYangDipake})`, completed: false},
            {id: Date.not()+2, text: `Outline main tasks for ${tujuanUtama.split(" ")[0]}`, completed: false},
            {id: Date.now()+3, text: `Draft initial plan`, completed: true},
            {id: Date.now()+4, text: `Review and refine plan`, completed: false},
        ];
        setTodolist(listDummy);
        setLagiGenerate(false);
    };

    const toggleTodo = (id) =>{
        setTodolist(
            todoList.map((todo)=>
            todo.id === id ? {...todo, completed: !todo.completed }: todo)
        );
    };

    const hapusTodo = (id) => {
        setTodolist(todoList.filter((todo) => todo.id !== id));
    };

    const ItemsVariants = {
        hidden: {opacity: 0, y: -10},
        visible: {opacity: 1, y:0},
        exit: {opacity: 0, x: -20, transition: {duration: 0.2}}
    };

    return (
    <div className="space-y-6">
      <div>
        <label htmlFor="goalInput" className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
          What's your main goal or project? (AI will generate tasks based on this)
        </label>
        <div className="flex space-x-2">
          <input
            type="text"
            id="goalInput"
            className="flex-grow p-3 border border-slate-300 dark:border-slate-600 rounded-lg shadow-sm focus:ring-brand-utama focus:border-brand-utama dark:bg-slate-700 dark:text-slate-100"
            placeholder="e.g., Launch new product, Plan company retreat, Learn React"
            value={tujuanUtama}
            onChange={(e) => setTujuanUtama(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleGenerateList()}
          />
          <button
            onClick={handleGenerateList}
            disabled={lagiGenerate || !tujuanUtama.trim()}
            className="px-6 py-3 bg-brand-utama text-white font-semibold rounded-lg hover:bg-indigo-700 transition-colors duration-200 shadow-md disabled:opacity-50 flex items-center"
          >
            {lagiGenerate ? <FiLoader className="animate-spin" /> : <FiPlusCircle />}
            <span className="ml-2 hidden sm:inline">Generate List</span>
          </button>
        </div>
      </div>

      {pesanError && (
        <div className="p-3 bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg flex items-center space-x-2">
          <FiAletrCircle /> <span>{pesanError}</span>
        </div>
      )}

      {todoList.length > 0 && (
        <div className="mt-4 p-4 bg-white dark:bg-slate-800 rounded-xl shadow-lg">
          <h3 className="text-lg font-semibold mb-3 text-slate-800 dark:text-slate-100 flex items-center">
            <FiList className="mr-2" /> Your AI Generated To-Do List:
          </h3>
          <ul className="space-y-2">
            <AnimatePresence>
              {todoList.map((todo) => (
                <motion.li
                  key={todo.id}
                  variants={ItemsVariants}
                  initial="hidden"
                  animate="visible"
                  exit="exit"
                  layout // Penting untuk animasi saat item dihapus/ditambah
                  className={`flex items-center justify-between p-3 rounded-lg transition-colors duration-200
                              ${todo.completed ? 'bg-green-50 dark:bg-green-900/30 line-through text-slate-500 dark:text-slate-400' : 'bg-slate-50 dark:bg-slate-700'}`}
                >
                  <div className="flex items-center cursor-pointer" onClick={() => toggleTodo(todo.id)}>
                    {todo.completed ? <FiCheckSquare className="mr-3 text-green-500" size={20} /> : <FiSquare className="mr-3 text-slate-400" size={20} />}
                    <span className={todo.completed ? 'italic' : ''}>{todo.text}</span>
                  </div>
                  <button onClick={() => hapusTodo(todo.id)} className="text-red-500 hover:text-red-700 p-1 rounded-full hover:bg-red-100 dark:hover:bg-red-900/50">
                    <FiTrash2 size={18} />
                  </button>
                </motion.li>
              ))}
            </AnimatePresence>
          </ul>
        </div>
      )}
      {todoList.length === 0 && !lagiGenerate && tujuanUtama && (
        <p className="text-center text-slate-500 dark:text-slate-400 mt-4">No tasks generated yet. Try a different goal or be more specific.</p>
      )}
    </div>
  );
};

export default AntarmukaTodoListAI;